1
00:00:00,210 --> 00:00:07,410
So now let us try and understand what Kubernetes is right, because many of us know that it is a container

2
00:00:07,410 --> 00:00:08,430
orchestration tool.

3
00:00:08,970 --> 00:00:14,490
We always try to compare it with Docker, which may not be the right things to do or the best things

4
00:00:14,490 --> 00:00:15,070
to do together.

5
00:00:15,690 --> 00:00:16,410
Why is that?

6
00:00:16,740 --> 00:00:20,850
Let's try and understand that as in what is Kubernetes, why do we need it?

7
00:00:21,060 --> 00:00:22,950
And is it the same as Docker or not?

8
00:00:23,100 --> 00:00:24,480
Okay, now.

9
00:00:24,720 --> 00:00:30,360
There are few things that will tell us Why do we need Kubernetes and how it is different from Docker

10
00:00:30,360 --> 00:00:32,630
is something that I would discuss in this bit  itself.

11
00:00:33,390 --> 00:00:39,450
Now, when you talk about Kubernetes is it is used for container communication, now this is where .

12
00:00:39,450 --> 00:00:40,860
It is different from Docker.

13
00:00:41,280 --> 00:00:48,240
When you talk about Docker, it is something that lets you basically set up containers and work with

14
00:00:48,240 --> 00:00:48,990
containers.

15
00:00:49,020 --> 00:00:49,350
OK.

16
00:00:49,770 --> 00:00:57,030
When you talk about Kubernetes is it is something that lets you manage these containers.

17
00:00:57,300 --> 00:01:02,130
be it  your Docker containers or be it other kind of containers as well.

18
00:01:02,580 --> 00:01:05,460
So that is what Kubernetes is does for you.

19
00:01:06,240 --> 00:01:12,600
Now let us try and understand why do we need something like Kubernetes to manage these containers?

20
00:01:12,840 --> 00:01:19,170
Be it a Docker container, or be it any other container when you talk about containers, they cannot communicate

21
00:01:19,170 --> 00:01:19,830
with each other.

22
00:01:19,830 --> 00:01:21,150
They need help to do that.

23
00:01:21,600 --> 00:01:25,050
This is where a tool like kubernetes comes into picture.

24
00:01:25,560 --> 00:01:33,330
Apart from that, if you go ahead, what containers do is they basically can be deployed as applications,

25
00:01:33,330 --> 00:01:35,090
right as individual applications.

26
00:01:35,100 --> 00:01:41,730
But since it is easier to deploy these applications thanks to containers, you cannot just go ahead

27
00:01:41,730 --> 00:01:44,130
and deploy applications the way it suits.

28
00:01:44,130 --> 00:01:47,010
You cannot just go ahead and deploy containers the way it suits you, right?

29
00:01:47,430 --> 00:01:49,010
There has to be a process behind it.

30
00:01:49,020 --> 00:01:53,550
You need to understand what containers to spawn, what to schedule, what to release, right?

31
00:01:53,760 --> 00:01:54,930
and what to deploy rather.

32 
00:01:55,290 --> 00:02:00,090
So to do that, this is were again kubernetes comes into picture the third bit here is 

33
00:02:00,450 --> 00:02:02,340
Careful container management.

34
00:02:02,760 --> 00:02:05,700
Now what do you mean by careful container management?

35
00:02:06,150 --> 00:02:10,770
Again, is similar to what we discussed right as we talked about how deployment works.

36
00:02:11,040 --> 00:02:14,910
Similarly, we also need to understand how container management works, right?

37
00:02:15,150 --> 00:02:19,080
When you talk about containers, there are quite a few pointers that come into picture.

38
00:02:19,270 --> 00:02:24,510
Now at the start, when I talked about Azure Kubernetes service, you realize that there were

39
00:02:24,510 --> 00:02:26,170
certain pointers that talked about.

40
00:02:26,190 --> 00:02:30,900
I mean, there were some highlights of features that on the first line that showed you it helps you

41
 00:02:30,900 --> 00:02:32,280
in better deployment.

42
00:02:32,340 --> 00:02:32,670
Right?

43
00:02:32,940 --> 00:02:34,110
And quite a few other things.

44
00:02:34,500 --> 00:02:41,040
So when you talk about those pointers, right, what services like Kubernetes do is they ensure

45
00:02:41,100 --> 00:02:47,520
that your deployment is happening properly, you are able to deploy multiple applications, right?

46
00:02:47,760 --> 00:02:52,530
And you are also able to track whether these applications are up and functioning, whether one of these

47
00:02:52,530 --> 00:02:55,620
applications instead, do you need to work on it, right?

48
00:02:55,890 --> 00:03:02,580
So you get this kind of management when you talk about kubernetes, Fourth bit is Enable Autoscaling .

49
00:03:02,820 --> 00:03:08,880
To give you an example, let's assume that you have an application that basically deals with three servers.

50
00:03:09,450 --> 00:03:12,240
Now, let's assume that that application does very well.

51
00:03:12,480 --> 00:03:12,750
Right?

52
00:03:13,050 --> 00:03:15,960
In this case, you might need to scale that application.

53
00:03:16,260 --> 00:03:18,900
Is it easier just to go and scale these applications?

54
00:03:18,930 --> 00:03:19,230
No.

55
00:03:19,620 --> 00:03:19,930
Right?

56
00:03:19,980 --> 00:03:25,140
Because there could be a possibility that now you have to manage not just 3 servers, but you are required

57
00:03:25,140 --> 00:03:26,340
to manage like hundreds of servers.

58
00:03:26,670 --> 00:03:33,000
In that case, using a tool or using an orchestration tool rather like Kubernetes would help you ensure

59
00:03:33,120 --> 00:03:39,210
that all your containers running in different 100 servers on top of these different 100 servers are functioning

60
00:03:39,210 --> 00:03:39,720
properly.

61
00:03:40,110 --> 00:03:42,360
So this is where auto scaling comes into picture.

62
00:03:42,660 --> 00:03:50,550
What Kubernetes does is it gives an ability to auto scale applications in situations where manual intervention

63
00:03:50,550 --> 00:03:53,640
is not needed, and that is what kubernetes does for you.

64
00:03:54,090 --> 00:03:57,640
So these are some of the reasons why communities came into picture.

65
00:03:57,930 --> 00:04:04,020
So yes, we had containers, but these were some of the drawbacks that containers had, and this is

66
00:04:04,020 --> 00:04:06,870
what something like Kubernetes is lets you do.

67
00:04:09,540 --> 00:04:12,810
Let us know ahead and understand what is Kubenetes is right.

68
00:04:13,410 --> 00:04:19,020
So I have already explained what Kubenetes is this there's not a lot of different points that have left

69
00:04:19,410 --> 00:04:20,190
to be explained.

70
00:04:20,430 --> 00:04:26,790
So if you talk about Cuban, it is like it is an open source container management tool which automates

71
00:04:26,790 --> 00:04:31,740
container deployment, container scaling and container load balancing.

72
00:04:31,920 --> 00:04:38,880
So all the activities that we discuss about managing multiple servers, ensuring that all the containers

73
00:04:38,880 --> 00:04:41,880
are working together, right, they're able to communicate with each other.

74
00:04:42,150 --> 00:04:47,520
So basically, all the container management, it happens, all they orchestrate and it happens using

75
00:04:47,730 --> 00:04:49,830
your Kubernetes, and that is what it does.

76
00:04:50,070 --> 00:04:50,310
Okay.

77
00:04:50,760 --> 00:04:52,800
What is one of the benefits it offers?

78
00:04:52,830 --> 00:04:55,440
It works brilliantly with all cloud vendors.

79
00:04:56,040 --> 00:04:58,890
It's a public hybrid or on premise.

80
00:04:59,700 --> 00:05:04,410
And one of those popular cloud platforms, as I've mentioned, is Microsoft Azure, which would be discussing

81
00:05:04,410 --> 00:05:05,100
as we move forward.

82
00:05:06,060 --> 00:05:08,160
So what do you need to know more about?

83
00:05:08,280 --> 00:05:10,410
Given it is now, these are some of the facts, right?

84
00:05:10,410 --> 00:05:12,700
I mean, some of the things that might indeed you.

85
00:05:12,720 --> 00:05:17,370
I'm not very sure about that, but if you talk about Kubernetes is it was developed by Google.

86
00:05:17,490 --> 00:05:17,790
Okay.

87
00:05:18,150 --> 00:05:23,850
So Google, as we know, brings in a big customer base, a big audience, right?

88
00:05:23,850 --> 00:05:25,530
A big community to discuss.

89
00:05:25,890 --> 00:05:30,900
And that is why this in itself is a big thing, because when you talk about something like Kuban, it

90
00:05:30,900 --> 00:05:31,140
is.

91
00:05:31,140 --> 00:05:35,820
It is going to have a huge community and that would mean that there's you support huge documentation

92
00:05:36,060 --> 00:05:37,140
for you to work with.

93
00:05:37,380 --> 00:05:44,340
It was developed using a programming language called Escola, and it entirely was built using it.

94
00:05:45,000 --> 00:05:51,180
Apart from that to just to summarize what Kubernetes is it, you can think of it as a number of containers

95
00:05:51,270 --> 00:05:57,780
that can be put into one logical unit so that you can simplify the process of managing these containers

96
00:05:58,050 --> 00:05:58,800
and how they work.

97
00:05:59,280 --> 00:05:59,580
OK.

98
00:05:59,970 --> 00:06:02,210
So this is what you do when a thesis, in a nutshell.

99
00:06:02,460 --> 00:06:08,550
Let's try and understand how the architecture of communities works and what are the components that

100
00:06:08,550 --> 00:06:10,020
you should know about communities.

101
00:06:10,830 --> 00:06:15,670
So this is what the basic architecture of Kubernetes is looks like.

102
00:06:15,690 --> 00:06:23,130
OK, so you have your APIs, you have your Kubernetes master, you have your image registry, then you

103
00:06:23,130 --> 00:06:26,610
have your notes, which basically are nothing but your applications.

104
00:06:26,910 --> 00:06:31,380
So let's try and extend these one by one as in our bodies function.

105
00:06:31,470 --> 00:06:31,770
OK.

106
00:06:32,160 --> 00:06:36,750
So when you talk about the API, is the seelye and the UI, right?

107
00:06:37,050 --> 00:06:41,760
The first thing that you need to do is you need to set up Kubernetes cluster, right?

108
00:06:42,360 --> 00:06:44,640
So when you talk about it is cluster.

109
00:06:44,910 --> 00:06:50,550
A cluster would be nothing but yard central management point using which you'll be managing all your

110
00:06:50,550 --> 00:06:54,470
applications, all your different containers that hosted applications, right?

111
00:06:54,810 --> 00:06:59,130
So first, what you do is you create this cluster, something that you can do by using your.

112
00:07:00,390 --> 00:07:02,040
And then you can interact.

113
00:07:02,130 --> 00:07:06,090
Or others can also interact with your cluster by using an API.

114
00:07:06,150 --> 00:07:07,140
So, OK.

115
00:07:07,410 --> 00:07:09,000
So yeah, API so is nothing.

116
00:07:09,000 --> 00:07:16,410
But that basically ensures the authentication and the ID of the people are the resources interacting

117
00:07:16,410 --> 00:07:20,070
with your when it is master of your Kubernetes cluster.

118
00:07:20,250 --> 00:07:20,560
Okay.

119
00:07:21,120 --> 00:07:26,250
Now, if you talk about Kubernetes cluster to stack your Kubernetes Lester, you are.

120
00:07:26,250 --> 00:07:28,320
What you can see is you have the Cuban.

121
00:07:28,320 --> 00:07:30,420
It is master like go in.

122
00:07:30,420 --> 00:07:37,360
It is master is something that basically manages your containers and what you see on the left hand side,

123
00:07:37,360 --> 00:07:38,490
the notes and stuff.

124
00:07:38,730 --> 00:07:39,090
Right.

125
00:07:39,510 --> 00:07:42,120
This is nothing but your work on it.

126
00:07:42,150 --> 00:07:46,350
Now this is where you'll be having your applications that are actually running.

127
00:07:46,740 --> 00:07:50,880
So, yeah, work notes would be implementing or running applications.

128
00:07:51,180 --> 00:07:57,480
Your Kubernetes master, on the other hand, would basically be managing these applications and telling

129
00:07:57,480 --> 00:08:02,550
you how to basically run these applications on top of it to understand this better.

130
00:08:02,760 --> 00:08:04,800
Let's go ahead and take a look at this diagram that you have.

131
00:08:05,280 --> 00:08:09,380
Okay, so what you see here is you see a Cuban, it is master, right?

132
00:08:09,390 --> 00:08:11,640
And inside this Cuban, it is master.

133
00:08:11,650 --> 00:08:13,140
There are quite a few other things as well.

134
00:08:13,150 --> 00:08:14,040
We'll discuss those.

135
00:08:14,490 --> 00:08:18,150
But what do you see on the screen are some key components that you need to know.

136
00:08:18,240 --> 00:08:18,540
Okay.

137
00:08:18,900 --> 00:08:21,060
So inside your Cuban, it is master.

138
00:08:21,060 --> 00:08:27,240
You'd be having two important point does not as your application controller and your service.

139
00:08:27,480 --> 00:08:27,780
Okay.

140
00:08:27,930 --> 00:08:33,560
So when you talk about a replication controller, it is nothing but a resource that is owned by a master

141
00:08:33,570 --> 00:08:34,260
that is Cuban.

142
00:08:34,260 --> 00:08:35,610
It is master rate.

143
00:08:36,060 --> 00:08:41,650
What it does is it ensures that the requested number of parts are running on nodes.

144
00:08:41,670 --> 00:08:42,510
Always.

145
00:08:42,630 --> 00:08:47,670
Okay, so your replication controller is something that controls the functioning, not controls.

146
00:08:47,670 --> 00:08:52,470
It basically tells her working notes that keep the nodes or the parts running.

147
00:08:52,890 --> 00:08:54,630
Now what are the parts and what do they do?

148
00:08:54,630 --> 00:08:55,320
Well disclosed that.

149
00:08:55,320 --> 00:08:56,200
Do not worry about that.

150
00:08:56,250 --> 00:09:00,150
It's not very complicated, but that is what the replication controller does.

151
00:09:00,540 --> 00:09:06,710
Apart from that, you have your service, which is nothing but again, an object on your master node,

152
00:09:06,900 --> 00:09:07,200
right?

153
00:09:07,230 --> 00:09:09,010
All you have given it is master idle that.

154
00:09:09,110 --> 00:09:13,250
A light load balancing across replicated groups of parts.

155
00:09:13,910 --> 00:09:19,910
Now let me try and make sense for these two by first explaining what I a. What I airports, right?

156
00:09:20,330 --> 00:09:24,590
So when you talk about, you know, these are nothing but your work on notes which would be holding

157
00:09:24,590 --> 00:09:25,490
your application.

158
00:09:25,970 --> 00:09:29,600
In this case, you know, it can hold more than one application.

159
00:09:30,050 --> 00:09:39,290
What we do is we basically classify our work and more into books, not by outside sub entities.

160
00:09:39,480 --> 00:09:39,650
Right.

161
00:09:39,950 --> 00:09:47,990
These are logical collections of the containers which need to interact with each other for the applications

162
00:09:48,140 --> 00:09:49,730
to keep running.

163
00:09:49,760 --> 00:09:50,170
OK.

164
00:09:50,600 --> 00:09:55,070
And inside this box, you basically have your containers.

165
00:09:55,490 --> 00:09:57,320
So that is what the infrastructure looks like.

166
00:09:57,320 --> 00:10:03,410
You'll be having parts and which would be holding a logical set of containers that probably result in

167
00:10:03,410 --> 00:10:04,970
a particular kind of application rate.

168
00:10:05,630 --> 00:10:08,240
And you can have multiple such ports.

169
00:10:08,780 --> 00:10:13,970
What you see here is you see what it tells you is a welcome node is nothing but a container, right?

170
00:10:14,390 --> 00:10:18,200
So it can be another container to lesbian need not be docked.

171
00:10:18,210 --> 00:10:21,410
But again, as I've mentioned, Docker is a popular tool, so you see it here.

172
00:10:21,980 --> 00:10:29,660
So what you see here is basically a container rate which has multiple ports, and these multiple ports

173
00:10:29,660 --> 00:10:33,350
are basically responsible for running your application.

174
00:10:33,620 --> 00:10:38,150
And who controls all these applications, your Kubernetes master?

175
00:10:38,780 --> 00:10:45,350
So assume a situation where you need to scale up a particular virtual machine, not a working machine,

176
00:10:45,350 --> 00:10:47,210
in this case, a particular.

177
00:10:48,050 --> 00:10:49,160
So how do you do that?

178
00:10:49,340 --> 00:10:54,920
To do that, you basically have something like a load balancer, which helps to balance a load, right?

179
00:10:54,920 --> 00:10:59,990
Either distributed or in case if you need scaling, it helps you scale your applications as well.

180
00:11:00,110 --> 00:11:00,410
Right?

181
00:11:00,800 --> 00:11:07,730
And then you have the replication controller that basically ensures that your application is running.

182
00:11:08,060 --> 00:11:14,390
So what a replication controller does is it tells you onward that this application has to run, OK,

183
00:11:14,870 --> 00:11:16,160
and who makes it run?

184
00:11:16,430 --> 00:11:18,740
There's something called Kubelik now.

185
00:11:18,770 --> 00:11:25,010
Inside every note, there would be another entity called Kubelik that Gilbert is responsible for running

186
00:11:25,010 --> 00:11:25,850
your application.

187
00:11:26,150 --> 00:11:31,550
So this is how you queue when it is architecture looks like, and this is how it functions.
